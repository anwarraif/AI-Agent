import os
import warnings
import re
from dotenv import load_dotenv

from langchain_ollama import ChatOllama
from langchain_core.messages import SystemMessage, HumanMessage
from langchain_community.utilities import SQLDatabase
from langchain_community.agent_toolkits import SQLDatabaseToolkit
from langgraph.prebuilt import create_react_agent

warnings.filterwarnings("ignore")

# Load env
load_dotenv()

# LLM Ollama
llm = ChatOllama(
    model="llama3.1:8b",
    base_url=os.getenv("OLLAMA_API_BASE")
)

# Database connection - PostgreSQL
db = SQLDatabase.from_uri(
    f"postgresql+psycopg2://{os.getenv('DB_USERNAME')}:{os.getenv('DB_PASSWORD')}@{os.getenv('DB_HOST')}:{os.getenv('DB_PORT')}/{os.getenv('DB_NAME')}"
)

# Toolkit - hanya expose table `id_jk`
toolkit = SQLDatabaseToolkit(db=db, llm=llm, include_tables=["id_jk"])
tools = toolkit.get_tools()

# Ambil informasi schema table agar LLM tidak bingung
table_info = db.get_table_info(["id_jk"])

SQL_PREFIX = f"""
Kamu adalah asisten ahli SQL untuk data Covid-19 Jakarta.
Berikut adalah schema tabel `id_jk`:
{table_info}

Instruksi Keras:
1. Jawablah hanya dengan query SQL **lengkap dan valid** untuk PostgreSQL.
2. Gunakan tabel `id_jk` saja, jangan gunakan tabel lain.
3. Kolom yang tersedia antara lain: date, cumulative_confirmed, cumulative_deceased, new_confirmed, new_deceased.
4. Jika user bertanya tentang jumlah kasus pada suatu periode (harian, bulanan, rentang tanggal):
   - Gunakan kolom **new_confirmed** untuk kasus baru, atau **new_deceased** untuk kematian baru.
   - Gunakan fungsi `TO_DATE(date, 'MM/DD/YYYY')` untuk konversi kolom date.
   - Filter periode dengan `BETWEEN` atau `EXTRACT(MONTH/YEAR FROM ...)`, bukan dengan `LIKE`.
5. Jika user bertanya tentang total kumulatif terakhir pada suatu tanggal:
   - Gunakan kolom **cumulative_confirmed** atau **cumulative_deceased** sesuai konteks.
   - Gunakan `ORDER BY TO_DATE(date, 'MM/DD/YYYY') DESC LIMIT 1` untuk mengambil nilai terbaru.
6. Selalu tutup query dengan benar (tidak boleh terpotong).
7. Jangan gunakan DML (INSERT, UPDATE, DELETE, DROP).
8. Hasilkan jawaban dalam 2 bagian:
   - **SQL Query:** tampilkan query
   - **Penjelasan:** ringkas hasil query dalam bahasa natural
"""

system_message = SystemMessage(content=SQL_PREFIX)

# Agent Executor
agent_executor = create_react_agent(
    llm,
    tools,
    state_modifier=system_message,
    debug=True
)

# Contoh pertanyaan
question = "Berapa total kasus Covid yang terkonfirmasi di Jakarta pada bulan Maret 2020?"

print("=== Agent Response ===")
final_answer = ""
for s in agent_executor.stream({"messages": [HumanMessage(content=question)]}):
    if "agent" in s:
        # ambil output agent
        final_answer += str(s["agent"]["messages"][0].content) + "\n"
    elif "tools" in s:
        # tool execution result
        final_answer += str(s["tools"]) + "\n"
    print(s)
    print("----")

print("\n=== Final LLM Answer ===")
print(final_answer)

# --- Extract SQL Query dari jawaban LLM ---
match = re.search(r"SQL Query:\s*```sql\s*(.*?)```", final_answer, re.DOTALL)
if match:
    sql_query = match.group(1).strip()
    print("\n=== Eksekusi Query ke DB ===")
    print("SQL:", sql_query)

    # Eksekusi query ke DB
    try:
        result = db.run(sql_query)
        print("Hasil:", result)
    except Exception as e:
        print("Error eksekusi query:", e)
else:
    print("Tidak ditemukan SQL Query dari jawaban LLM")
